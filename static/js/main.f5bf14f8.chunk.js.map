{"version":3,"sources":["serviceWorker.ts","api/todolist-task-api.ts","utils/error-utils.ts","features/login/auth-reducer.ts","components/app/app-reducer/AppReducer.ts","components/features/TodolistList/Todolist/todolist-reducer.ts","components/features/TodolistList/Todolist/tasks-reducer.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","components/features/TodolistList/Todolist/Task/Task.tsx","components/features/TodolistList/Todolist/Todolist.tsx","components/features/TodolistList/TodolistList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","components/app/store.ts","features/login/Login.tsx","components/app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instant","axios","create","withCredentials","baseURL","headers","todolistTaskApi","get","title","post","todolistId","put","delete","taskApi","taskId","model","authApi","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","extraReducers","builder","addCase","loginTC","fulfilled","logoutTC","createAsyncThunk","param","thunkAPI","a","resultCode","rejectWithValue","errors","fieldsErrors","undefined","res","authReducer","reducer","actions","isInitialized","initializeAppTC","appReducer","ChangeFilterAC","index","findIndex","tl","id","filter","changeTodolistEntityStatus","entityStatus","getTodolistTC","todolists","map","deleteTodolistTC","splice","createTodolistTC","unshift","todolist","changeTodolistTitleTC","newTitle","item","todolistReducer","forEach","getTasksTC","tasks","deleteTasksTC","createTasksTC","todoListId","updateTaskTC","thunkApi","items","task","allTasksFromState","getState","find","t","apiModel","priority","startDate","deadline","description","completed","domainModel","tasksReducer","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addTask","trim","TextField","label","variant","defaultValue","helperText","onChange","e","currentTarget","onKeyPress","charCode","Button","onClick","EditableSpan","props","console","log","editMode","seEditMode","onBlur","autoFocus","onDoubleClick","IconButton","size","Edit","Task","onClickHandler","useCallback","removeTask","onChangeStatusHandler","changeStatus","checked","Completed","New","onChangeTitleHandler","changeTitle","ListItem","className","Checkbox","color","Delete","Todolist","demo","useDispatch","useEffect","actionTC","onClickStatusAll","changeFilter","onClickStatusActive","onClickStatusCompleted","onchangeTitle","changeTodolistTitle","taskForTodolist","f","removeTodolist","List","m","ButtonGroup","TodolistList","useSelector","auth","thunk","addTodolist","Grid","container","style","padding","spacing","Paper","to","Alert","ref","elevation","ErrorSnackbars","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","sx","width","RootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","setFieldError","field","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","type","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f5bf14f8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppExample is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from \"axios\";\r\n\r\n\r\n\r\nconst instant = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    headers: {\r\n        'API-KEY': '4b750f58-1048-4ae6-9514-873b7e78e720'\r\n    }\r\n});\r\n\r\nexport const todolistTaskApi = {\r\n    getTodolist() {\r\n        return instant.get<TodolistType[]>\r\n        ('/todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instant.post<{title:string},AxiosResponse<TodolistResponseType<{item: TodolistType }>>>\r\n        ('/todo-lists', {title})\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instant.put<{ title: string }, AxiosResponse<TodolistResponseType>>\r\n        ('/todo-lists/' + todolistId, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instant.delete<TodolistResponseType>\r\n        ('/todo-lists/' + todolistId)\r\n    }\r\n};\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n        return instant.get<TaskResponseType>\r\n        (`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title:string,todolistId: string) {\r\n        return instant.post<{ title: string }, AxiosResponse<TodolistResponseType<{ item: TaskType }>>>\r\n        (`/todo-lists/${todolistId}/tasks`,{title})\r\n    },\r\n    updateTask(todolistId: string,taskId:string,model:UpdateTaskModelType) {\r\n        return instant.put<UpdateTaskModelType, AxiosResponse<TodolistResponseType<{ item: TaskType }>>>\r\n        (`/todo-lists/${todolistId}/tasks/${taskId}`,model)\r\n    },\r\n    deleteTask(taskId:string,todolistId: string) {\r\n        return instant.delete<TodolistResponseType>\r\n        (`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n};\r\nexport const authApi={\r\n    login(data:LoginRequestType){\r\n        return instant.post<LoginRequestType,AxiosResponse<TodolistResponseType<{userId:number}>>>('/auth/login',data)\r\n    },\r\n    me(){\r\n        return instant.get<TodolistResponseType<DataAuthResponseType>>('/auth/me')\r\n    },\r\n    logout(){\r\n        return instant.delete<TodolistResponseType>('/auth/login')\r\n    }\r\n\r\n};\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n};\r\nexport type FieldErrorType={field:string,error:string}\r\nexport type TodolistResponseType<D={}>={\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n};\r\nexport type LoginRequestType={\r\n    email:string\r\n    password:string\r\n    rememberMe?:boolean\r\n    captcha?:string\r\n}\r\ntype DataAuthResponseType={\r\n    userId:number\r\n    email:string\r\n    login:string\r\n}\r\n\r\nexport enum TaskStatuses{\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities{\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType={\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n};\r\ntype TaskResponseType={\r\n    error:string|null\r\n    totalCount:number\r\n    items:TaskType[]\r\n};\r\nexport type UpdateTaskModelType={\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n};\r\n\r\n","import {\r\n    setAppErrorAC,\r\n    setAppStatusAC,\r\n    SetErrorActionType, SetStatusActionType\r\n} from '../components/app/app-reducer/AppReducer';\r\nimport { Dispatch } from 'redux';\r\nimport {TodolistResponseType} from \"../api/todolist-task-api\";\r\n\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: TodolistResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC({error:error.message}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetErrorActionType | SetStatusActionType>","import {setAppStatusAC} from \"../../components/app/app-reducer/AppReducer\";\r\nimport {authApi, FieldErrorType, LoginRequestType} from \"../../api/todolist-task-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n// export type InitialStateType = typeof initialState\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\nexport const loginTC = createAsyncThunk<undefined,LoginRequestType, {\r\n    rejectValue: { errors: string[], fieldsErrors?: FieldErrorType[] }\r\n}>('auth/login', async (param: LoginRequestType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const data = await authApi.login(param)\r\n        if (data.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(data.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: data.data.messages, fieldsErrors: data.data.fieldsErrors})\r\n        }\r\n    } catch (err:any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authApi.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (err:any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","\r\nimport {authApi} from \"../../../api/todolist-task-api\";\r\nimport {setIsLoggedIn} from \"../../../features/login/auth-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: initialStateType = {\r\n    status: \"idle\",\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        // setIsInitialized(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n        //     state.isInitialized = action.payload.isInitialized\r\n        // }\r\n    },\r\n    extraReducers:builder => {\r\n        builder.addCase(initializeAppTC.fulfilled,(state)=>{\r\n            state.isInitialized=true\r\n        })\r\n    }\r\n})\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const data = await authApi.me()\r\n    if (data.data.resultCode === 0) {\r\n        thunkAPI.dispatch(setIsLoggedIn({value: true}));\r\n    } else {\r\n    }\r\n    return;\r\n})\r\n\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n// (state: initialStateType = initialState, action: RootActionsTypes): initialStateType {\r\n//     switch (action.type) {\r\n//         case \"APP/SET-STATUS\":\r\n//             return {...state, status: action.status}\r\n//         case \"APP/SET-ERROR\":\r\n//             return {...state, error: action.error}\r\n//         case  \"APP/SET-INITIALIZED\":\r\n//             return {...state,isInitialized:action.isInitialized}\r\n//\r\n//         default:\r\n//             return {...state}\r\n//     }\r\n// }\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\n\r\nexport type initialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n// export const setAppErrorAC = (error: string | null) => ({type: \"APP/SET-ERROR\", error} as const)\r\n// export const setAppStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\n// export const setIsInitialized = (isInitialized: boolean) => ({type: \"APP/SET-INITIALIZED\", isInitialized} as const)\r\n\r\n// export const initializeAppTC = (): RootThunkTypes => (dispatch) => {\r\n//     dispatch(setAppStatusAC({status:'loading'}))\r\n//     authApi.me().then(data => {\r\n//         if (data.data.resultCode === 0) {\r\n//             dispatch(setIsLoggedIn({ value: true }));\r\n//         } else {\r\n//         }\r\n//     })\r\n//         .finally(()=>{\r\n//             dispatch(setIsInitialized({isInitialized:true}))\r\n//         })\r\n// }\r\n//\r\n\r\nexport type SetErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type AppActionsTypes =\r\n    | SetErrorActionType\r\n    | SetStatusActionType\r\n    // | ReturnType<typeof setIsInitialized>\r\n","import {todolistTaskApi, TodolistType} from \"../../../../api/todolist-task-api\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../../app/app-reducer/AppReducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError} from \"../../../../utils/error-utils\";\r\n\r\n\r\n// const CHANGE_FILTER = \"CHANGE-FILTER\"\r\n// const REMOVE_TODOLIST = \"REMOVE-TODOLIST\"\r\n// const CHANGE_TODOLIST_TITLE = \"CHANGE-TODOLIST-TITLE\"\r\n// const ADD_TODOLIST = \"ADD-TODOLIST\"\r\n// const GET_TODOLIST = \"GET-TODOLIST\"\r\n// const CHANGE_TODOLIST_ENTITY_STATUS = \"CHANGE_TODOLIST_ENTITY_STATUS\"\r\n//\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolist\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        ChangeFilterAC(state, action: PayloadAction<{ value: FilterValueType, todolistId: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.value\r\n        },\r\n        // // RemoveTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\r\n        // //     const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n        // //     if (index > -1) {\r\n        // //         state.splice(index, 1)\r\n        // //     }\r\n        // },\r\n        // ChangeTodolistTitleAC(state, action: PayloadAction<{ id: string, newTitle: string }>) {\r\n        //     const index = state.findIndex(tl => tl.id === action.payload.id)\r\n        //     state[index].title = action.payload.newTitle\r\n        // },\r\n        // AddTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n        //     state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        // },\r\n        // GetTodolistAC(state, action: PayloadAction<{ todolists: TodolistType[] }>) {\r\n        //     return state = action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        // },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ todolistId: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(getTodolistTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        })\r\n        builder.addCase(deleteTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(createTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.newTitle\r\n        })\r\n\r\n    }\r\n})\r\nexport const getTodolistTC = createAsyncThunk('todolist/getTodolistTC', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const data = await todolistTaskApi.getTodolist()\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: data.data}\r\n    } catch (error: any) {\r\n        handleServerAppError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\nexport const deleteTodolistTC = createAsyncThunk('todolist/deleteTodolistTC', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatus({todolistId: todolistId, status: \"loading\"}))\r\n    const data = await todolistTaskApi.deleteTodolist(todolistId)\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    return {todolistId: todolistId}\r\n})\r\nexport const createTodolistTC = createAsyncThunk('todolist/createTodolistTC', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const data = await todolistTaskApi.createTodolist(title)\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolist: data.data.data.item}\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolist/changeTodolistTitleTC', async (param: { todolistId: string, title: string }, thunkAPI) => {\r\n    const data = await todolistTaskApi.updateTodolist(param.todolistId, param.title)\r\n    return {id: param.todolistId, newTitle: param.title}\r\n})\r\n\r\n\r\nexport const todolistReducer = slice.reducer\r\n\r\nexport const {\r\n    ChangeFilterAC,\r\n    changeTodolistEntityStatus\r\n} = slice.actions\r\n//\r\n// const todolistReducer = (state: InitialTodolistStateType = initialState, action: RootActionsTypes): InitialTodolistStateType => {\r\n//     switch (action.type) {\r\n//         case \"CHANGE-FILTER\": {\r\n//             // const todolist = state.find(f => f.id === action.todolistId)\r\n//             // if (todolist) {\r\n//             //     todolist.filter = action.value\r\n//             // }\r\n//             return state.map(m => m.id === action.todolistId ? {...m, filter: action.value} : m)\r\n//         }\r\n//         case \"CHANGE_TODOLIST_ENTITY_STATUS\":\r\n//             return state.map(m => m.id === action.todolistId ? {...m, entityStatus: action.status} : m)\r\n//         case \"REMOVE-TODOLIST\":\r\n//             return state.filter(f => f.id !== action.todolistId)\r\n//\r\n//         case \"CHANGE-TODOLIST-TITLE\":\r\n//             // const todolistTitle = state.find(f => f.id === action.id)\r\n//             // if (todolistTitle) {\r\n//             //     todolistTitle.title = action.newTitle\r\n//             // }\r\n//             return state.map(m => m.id === action.id ? {...m, title: action.newTitle} : m)\r\n//\r\n//         case \"ADD-TODOLIST\":\r\n//             const newTodolist: TodolistDomainType = {...action.todolist, filter: \"all\", entityStatus: 'idle'}\r\n//             return [newTodolist, ...state]\r\n//\r\n//         case \"GET-TODOLIST\":\r\n//             return action.todolists.map(tl => {\r\n//                 return {...tl, filter: \"all\", entityStatus: 'idle'}\r\n//             })\r\n//         case \"CLEAR-DATA\":\r\n//             return []\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n// export const ChangeFilterAC = (value: FilterValueType, todolistId: string) =>\r\n//     ({type: CHANGE_FILTER, value, todolistId}) as const\r\n// export const RemoveTodolistAC = (todolistId: string) =>\r\n//     ({type: REMOVE_TODOLIST, todolistId}) as const\r\n// export const ChangeTodolistTitleAC = (id: string, newTitle: string) =>\r\n//     ({type: CHANGE_TODOLIST_TITLE, id, newTitle}) as const\r\n// export const AddTodolistAC = (todolist: TodolistType) =>\r\n//     ({type: ADD_TODOLIST, todolist}) as const\r\n// export const GetTodolistAC = (todolists: TodolistType[]) =>\r\n//     ({type: GET_TODOLIST, todolists}) as const\r\n// export const changeTodolistEntityStatus = (todolistId: string, status: RequestStatusType) =>\r\n//     ({type: CHANGE_TODOLIST_ENTITY_STATUS, todolistId, status}) as const\r\n// export const clearTodosDataAC = () => ({type: \"CLEAR-DATA\"} as const)\r\n\r\n// export const getTodolistTC = ()=> (dispatch:Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     todolistTaskApi.getTodolist().then(data => {\r\n//         dispatch(GetTodolistAC({todolists: data.data}))\r\n//         dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//         return data.data\r\n//     })\r\n//         .catch(error=>{\r\n//             handleServerNetworkError(error,dispatch)\r\n//         })\r\n// };\r\n\r\n// export const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     todolistTaskApi.createTodolist(title).then(data => {\r\n//         const todolist = data.data.data.item\r\n//         dispatch(AddTodolistAC({todolist: todolist}))\r\n//         dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//     })\r\n// };\r\n// export const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: \"loading\"}))\r\n//     dispatch(changeTodolistEntityStatus({todolistId: todolistId, status: \"loading\"}))\r\n//     todolistTaskApi.deleteTodolist(todolistId).then(data => {\r\n//         dispatch(RemoveTodolistAC({todolistId: todolistId}))\r\n//         dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n//     })\r\n// };\r\n// export const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n//     todolistTaskApi.updateTodolist(todolistId, title).then(data => {\r\n//         dispatch(ChangeTodolistTitleAC({id: todolistId, newTitle: title}))\r\n//     })\r\n// }\r\n\r\nexport default todolistReducer;\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}\r\n//export type InitialTodolistStateType = typeof initialState\r\n\r\n// export type TodolistActionsTypes =\r\n//     ReturnType<typeof ChangeFilterAC>\r\n//     | ReturnType<typeof RemoveTodolistAC>\r\n//     | ReturnType<typeof ChangeTodolistTitleAC>\r\n//     | ReturnType<typeof AddTodolistAC>\r\n//     | ReturnType<typeof GetTodolistAC>\r\n//     | ReturnType<typeof changeTodolistEntityStatus>\r\n//     | ReturnType<typeof clearTodosDataAC>\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\n\r\n","import {createTodolistTC, deleteTodolistTC, getTodolistTC} from \"./todolist-reducer\";\r\nimport {TasksStateType} from \"../../../app/App\";\r\nimport {taskApi, UpdateTaskModelType} from \"../../../../api/todolist-task-api\";\r\nimport {RootStoreType} from \"../../../app/store\";\r\nimport {setAppStatusAC} from \"../../../app/app-reducer/AppReducer\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\n//\r\n// export type TasksActionsTypes =\r\n//     ReturnType<typeof removeTaskAC>\r\n//     | ReturnType<typeof addTaskAC>\r\n//     | ReturnType<typeof updateTaskAC>\r\n//     | ReturnType<typeof changeTitleAC>\r\n//     | ReturnType<typeof AddTodolistAC>\r\n//     | ReturnType<typeof RemoveTodolistAC>\r\n//     | ReturnType<typeof GetTodolistAC>\r\n//     | ReturnType<typeof getTasksAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n//export type initialTasksStateType = typeof initialState\r\n\r\nconst slice = createSlice({\r\n    name: \"task\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        // removeTaskAC(state, action: PayloadAction<{ id: string, todolistId: string }>) {\r\n        //     const tasks = state[action.payload.todolistId]\r\n        //     const index = tasks.findIndex(tl => tl.id === action.payload.todolistId)\r\n        //     if (index > -1) {\r\n        //         tasks.splice(index, 1)\r\n        //     }\r\n        // },\r\n        // addTaskAC(state, action: PayloadAction<TaskType>) {\r\n        //     state[action.payload.todoListId].unshift(action.payload)\r\n        // },\r\n        // updateTaskAC(state, action: PayloadAction<{ id: string, model: UpdateTaskDomainTaskModelType, todolistId: string }>) {\r\n        //     const tasks = state[action.payload.todolistId]\r\n        //     const index = tasks.findIndex(tl => tl.id === action.payload.todolistId)\r\n        //     if (index > -1) {\r\n        //         tasks[index] = {...tasks[index], ...action.payload.model}\r\n        //     }\r\n        // },\r\n        // getTasksAC(state, action: PayloadAction<{ tasks: TaskType[], todolistId: string }>) {\r\n        //     state[action.payload.todolistId] = action.payload.tasks\r\n        // }\r\n    },\r\n\r\n    extraReducers: (builder) => {\r\n        builder.addCase(createTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(deleteTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(getTodolistTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(getTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(deleteTasksTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(createTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index]={...tasks[index],...action.payload.model}\r\n            }\r\n        })\r\n    }\r\n})\r\nexport const getTasksTC = createAsyncThunk('task/getTasksTC', async (todolistId: string, thunkApi) => {\r\n    thunkApi.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const data = await taskApi.getTask(todolistId)\r\n    const tasks = data.data.items\r\n    thunkApi.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n\r\n})\r\nexport const deleteTasksTC = createAsyncThunk('task/deleteTasksTC', async (param: { taskId: string, todolistId: string }, thunkApi) => {\r\n    thunkApi.dispatch(setAppStatusAC({status: 'loading'}))\r\n    let data = await taskApi.deleteTask(param.taskId, param.todolistId)\r\n    thunkApi.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\nexport const createTasksTC = createAsyncThunk('task/createTasksTC', async (param: { title: string, todolistId: string }, thunkApi) => {\r\n    thunkApi.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        let data = await taskApi.createTask(param.title, param.todolistId)\r\n        if (data.data.resultCode === 0) {\r\n            const task = data.data.data.item\r\n            // const action = addTaskAC(task)\r\n            // thunkApi.dispatch(action)\r\n            thunkApi.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return task;\r\n        } else {\r\n            handleServerAppError(data.data, thunkApi.dispatch)\r\n            return thunkApi.rejectWithValue(null)\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkApi.dispatch)\r\n        return thunkApi.rejectWithValue(null)\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('task/updateTaskTC', async (param: { todolistId: string,taskId: string, domainModel: UpdateTaskDomainTaskModelType}, thunkAPI) => {\r\n    const allTasksFromState = thunkAPI.getState() as RootStoreType;\r\n    const task = allTasksFromState.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        completed: task.completed,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    const res = await taskApi.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return {todolistId: param.todolistId,taskId: param.taskId, model: param.domainModel}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {\r\n    // removeTaskAC,\r\n    // addTaskAC,\r\n    // updateTaskAC,\r\n    // getTasksAC\r\n} = slice.actions\r\n\r\n// const tasksReducer = (state: initialTasksStateType = initialState, action: RootActionsTypes): initialTasksStateType => {\r\n//     switch (action.type) {\r\n//         case \"REMOVE-TASK\": {\r\n//             // let filteredTask = state[action.todolistId].filter(f => f.id !== action.id)\r\n//             // state[action.todolistId] = filteredTask\r\n//             // return {...state}\r\n//             return {...state, [action.todolistId]: state[action.todolistId].filter(f => f.id !== action.id)}\r\n//         }\r\n//         case \"ADD-TASK\": {\r\n//             return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n//         }\r\n//         case \"UPDATE-TASK\": {\r\n//             // let task = state[action.todolistId].find(f => f.id === action.id)\r\n//             // if (task) {\r\n//             //     task.isDone = action.isDone\r\n//             // }\r\n//             return {...state,\r\n//                 [action.todolistId]: state[action.todolistId]\r\n//                     .map(f => f.id === action.id ? {...f, ...action.model} : f)}\r\n//         }\r\n//         case \"CHANGE-TITLE\": {\r\n//             // let todolistTitle = state[action.todolistId].find(f => f.id === action.id)\r\n//             // if (todolistTitle) {\r\n//             //     todolistTitle.title = action.newTitle\r\n//             // }\r\n//             return {...state,\r\n//                 [action.todolistId]: state[action.todolistId]\r\n//                     .map(f => f.id === action.id ? {...f, title: action.newTitle} : f)}\r\n//         }\r\n//         case \"ADD-TODOLIST\": {\r\n//             //state[action.todolistId] = []\r\n//             return {...state, [action.todolist.id]: []}\r\n//         }\r\n//         case \"REMOVE-TODOLIST\": {\r\n//             delete state[action.todolistId]\r\n//             return {...state}\r\n//         }\r\n//         case \"GET-TODOLIST\": {\r\n//             const stateCopy = {...state}\r\n//             action.todolists.forEach((tl) => {\r\n//                 stateCopy[tl.id] = []\r\n//             })\r\n//             return stateCopy;\r\n//         }\r\n//         case \"GET_TASKS\": {\r\n//             let stateCopy = {...state}\r\n//             stateCopy[action.todolistId] = action.tasks\r\n//             return stateCopy\r\n//         }\r\n//         case \"CLEAR-DATA\":\r\n//             return {}\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n// export const removeTaskAC = (id: string, todolistId: string)=>\r\n//     ({type: \"REMOVE-TASK\", id, todolistId}) as const\r\n// export const addTaskAC = (task: TaskType) =>\r\n//     ({type: \"ADD-TASK\", task}) as const\r\n// export const updateTaskAC = (id: string, model:UpdateTaskDomainTaskModelType, todolistId: string)=>\r\n//     ({type: \"UPDATE-TASK\", id, model, todolistId}) as const\r\n// export const changeTitleAC = (id: string, newTitle: string, todolistId: string)=>\r\n//     ({type: \"CHANGE-TITLE\", id, newTitle, todolistId}) as const\r\n// export const getTasksAC = (tasks: TaskType[], todolistId: string)=>\r\n//     ({type: \"GET_TASKS\", tasks, todolistId}) as const\r\n\r\n\r\n// export const getTasksTC_ = (todolistId: string)=> (dispatch:Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     taskApi.getTask(todolistId).then(data => {\r\n//         const tasks =data.data.items\r\n//         const action = getTasksAC({tasks: tasks, todolistId: todolistId})\r\n//         dispatch(action)\r\n//         dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//     })\r\n// };\r\n// export const createTasksTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     taskApi.createTask(title, todolistId).then((data) => {\r\n//         if (data.data.resultCode === 0) {\r\n//             const task = data.data.data.item\r\n//             const action = addTaskAC(task)\r\n//             dispatch(action)\r\n//             dispatch(setAppStatusAC({status: 'succeeded'}))\r\n//         } else {\r\n//             handleServerAppError(data.data, dispatch)\r\n//         }\r\n//     })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// };\r\n// export const deleteTasksTC_ = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n//     dispatch(setAppStatusAC({status: 'loading'}))\r\n//     taskApi.deleteTask(taskId, todolistId).then((data) => {\r\n//         const action = removeTaskAC({id: taskId, todolistId: todolistId})\r\n//         dispatch(action)\r\n//         dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n//\r\n//     })\r\n// };\r\nexport type UpdateTaskDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    completed?: boolean\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n};\r\n// export const updateTaskTC = (taskId: string, domainModel: UpdateTaskDomainTaskModelType, todolistId: string) => (dispatch: Dispatch, getState: () => RootStoreType) => {\r\n//     const allTasksFromState = getState();\r\n//     const task = allTasksFromState.tasks[todolistId].find(t => t.id === taskId)\r\n//     if (!task) {\r\n//         console.warn('task not found in the state')\r\n//         return\r\n//     }\r\n//     const apiModel: UpdateTaskModelType = {\r\n//         title: task.title,\r\n//         priority: task.priority,\r\n//         startDate: task.startDate,\r\n//         deadline: task.deadline,\r\n//         description: task.description,\r\n//         completed: task.completed,\r\n//         status: task.status,\r\n//         ...domainModel\r\n//     }\r\n//     taskApi.updateTask(todolistId, taskId, apiModel)\r\n//         .then(res => {\r\n//             if (res.data.resultCode === 0) {\r\n//                 const action = updateTaskAC({id: taskId, model: domainModel, todolistId: todolistId})\r\n//                 dispatch(action)\r\n//             } else {\r\n//                 handleServerAppError(res.data, dispatch)\r\n//             }\r\n//         })\r\n//         .catch(error => {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         })\r\n// }\r\n//\r\n\r\nexport default tasksReducer;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?:boolean\r\n\r\n}\r\n\r\nconst AddItemForm = React.memo(({addItem,disabled=false}: AddItemFormType) => {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            return setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) =>{\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <TextField\r\n                label=\"Type value...\"\r\n                variant=\"outlined\"\r\n                defaultValue=\"Hello World\"\r\n                error={!!error}\r\n                helperText={error}\r\n                value={title} onChange={onChangeInputHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n            />\r\n\r\n            <Button onClick={addTask} variant=\"contained\" disabled={disabled}>add</Button>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Edit} from \"@material-ui/icons\";\r\n\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n\r\n\r\n}\r\n\r\nconst EditableSpan=React.memo((props: EditableSpanPropsType)=> {\r\n    console.log('EditableSpan is called')\r\n    let [editMode, seEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n\r\n    let activeEditMode = () => {\r\n        seEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    let activeViewMode = () => {\r\n        seEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    let onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activeViewMode} autoFocus/>\r\n        : <span onDoubleClick={activeEditMode}>{props.title}\r\n            <IconButton size={\"small\"}>\r\n            <Edit/>\r\n        </IconButton>\r\n            </span>\r\n\r\n})\r\n\r\nexport default EditableSpan;\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport EditableSpan from \"../../../../editableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../../api/todolist-task-api\";\r\n\r\ntype TaskPropType = {\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    todolistId: string\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n        props.changeTitle(props.todolistId,props.task.id, newTitle)\r\n    }, [props.todolistId,props.task.id ])\r\n    return <ListItem key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is_done\" : \"\"}>\r\n        <Checkbox\r\n            color=\"primary\"\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            onChange={onChangeStatusHandler}\r\n        />\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        <IconButton>\r\n            <Delete onClick={onClickHandler}/>\r\n        </IconButton>\r\n    </ListItem>\r\n\r\n\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../../../addItemForm/AddItemForm\";\r\nimport EditableSpan from \"../../../editableSpan/EditableSpan\";\r\nimport {Button, ButtonGroup, IconButton, List} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-task-api\";\r\nimport {FilterValueType, TodolistDomainType} from \"./todolist-reducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {getTasksTC} from \"./tasks-reducer\";\r\n\r\n\r\n\r\nexport type PropsType = {\r\n    todolist:TodolistDomainType\r\n    tasks: TaskType[]\r\n    changeFilter: (value: FilterValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTitle: (todolistId: string,id: string, newTitle: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nconst Todolist = React.memo(({demo = false, ...props}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        } else {\r\n            const actionTC = getTasksTC(props.todolist.id)\r\n            dispatch(actionTC)\r\n        }\r\n\r\n    }, [])\r\n\r\n    const onClickStatusAll = useCallback(() =>\r\n        props.changeFilter(\"all\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onClickStatusActive = useCallback(() =>\r\n        props.changeFilter(\"active\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onClickStatusCompleted = useCallback(() =>\r\n        props.changeFilter(\"completed\", props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    };\r\n    const addItem = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const onchangeTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, newTitle)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    let taskForTodolist = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        taskForTodolist = props.tasks.filter(f => f.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        taskForTodolist = props.tasks.filter(f => f.status === TaskStatuses.Completed)\r\n    }\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.todolist.title} onChange={onchangeTitle}\r\n                             />\r\n                <IconButton color={\"inherit\"}  disabled={props.todolist.entityStatus===\"loading\"}>\r\n                    <Delete onClick={() => {\r\n                        removeTodolist()\r\n                    }}/>\r\n                </IconButton>\r\n            </h3>\r\n            <div>\r\n                <AddItemForm addItem={addItem} disabled={props.todolist.entityStatus===\"loading\"}/>\r\n            </div>\r\n            <List>\r\n                {\r\n                    taskForTodolist.map(m => {\r\n                        return <Task removeTask={props.removeTask}\r\n                                     changeStatus={props.changeStatus}\r\n                                     changeTitle={props.changeTitle}\r\n                                     todolistId={props.todolist.id}\r\n                                     task={m}\r\n                                     key={m.id}/>\r\n                    })\r\n                }\r\n            </List>\r\n            <div>\r\n                <ButtonGroup variant={\"outlined\"}>\r\n                    <Button color={props.todolist.filter === \"all\" ? \"secondary\" : \"primary\"} onClick={onClickStatusAll}>All\r\n                    </Button>\r\n                    <Button color={props.todolist.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                            onClick={onClickStatusActive}>Active\r\n                    </Button>\r\n                    <Button color={props.todolist.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                            onClick={onClickStatusCompleted}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Todolist;\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStoreType} from \"../../app/store\";\r\nimport {\r\n    ChangeFilterAC,\r\n    changeTodolistTitleTC,\r\n    createTodolistTC,\r\n    deleteTodolistTC,\r\n    FilterValueType,\r\n    getTodolistTC,\r\n    TodolistDomainType\r\n} from \"./Todolist/todolist-reducer\";\r\nimport {createTasksTC, deleteTasksTC, updateTaskTC} from \"./Todolist/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../../api/todolist-task-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport AddItemForm from \"../../addItemForm/AddItemForm\";\r\nimport Todolist from \"./Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {TasksStateType} from \"../../app/App\";\r\n\r\n\r\nexport const TodolistList: React.FC<PropsType> = ({demo = false}) => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<RootStoreType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<RootStoreType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<RootStoreType,TasksStateType>(state => state.tasks)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = getTodolistTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(deleteTasksTC({taskId:id, todolistId:todolistId}))\r\n        // let filteredTask = tasks[todolistId].filter(f => f.id !== id)\r\n        // tasks[todolistId] = filteredTask\r\n        // setTasks({...tasks})\r\n    }, [])\r\n    const changeFilter = useCallback((value: FilterValueType, todolistId: string) => {\r\n        dispatch(ChangeFilterAC({value:value, todolistId:todolistId}))\r\n        // let todolist = todolists.find(f => f.id === todolistId)\r\n        // if (todolist) {\r\n        //     todolist.filter = value\r\n        //     setTodolists([...todolists])\r\n        // }\r\n    }, [])\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(createTasksTC({title, todolistId}))\r\n        // let newTask = {id: v1(), title: title, isDone: false}\r\n        // tasks[todolistId] = [newTask, ...tasks[todolistId]]\r\n        // setTasks({...tasks})\r\n    }, [])\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC({taskId:id, domainModel:{status}, todolistId:todolistId}))\r\n        // let task = tasks[todolistId].find(f => f.id === id)\r\n        // if (task) {\r\n        //     task.isDone = isDone\r\n        //     setTasks({...tasks})\r\n        // }\r\n    }, [])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistTC(todolistId))\r\n        // let todolist = todolists.filter(f => f.id !== todolistId)\r\n        // setTodolists(todolist)\r\n        // delete tasks[todolistId]\r\n        // setTasks({...tasks})\r\n    }, [])\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n        // let newTodolist: TodolistType = {id: v1(), title: title, filter: \"all\"}\r\n        // setTodolists([newTodolist, ...todolists])\r\n        // setTasks({\r\n        //     ...tasks,\r\n        //     [newTodolist.id]: []\r\n        // })\r\n    }, [dispatch]);\r\n    const changeTitle = useCallback((todolistId: string,id: string, newTitle: string) => {\r\n        dispatch(updateTaskTC({todolistId:todolistId,taskId:id, domainModel:{title: newTitle}}))\r\n        // let todolistTitle = tasks[todolistId].find(f => f.id === id)\r\n        // if (todolistTitle) {\r\n        //     todolistTitle.title = newTitle\r\n        //     setTasks({...tasks})\r\n        // }\r\n    }, []);\r\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC({todolistId:id, title:newTitle}))\r\n        // let todolistTitle = todolists.find(f => f.id === id)\r\n        // if (todolistTitle) {\r\n        //     todolistTitle.title = newTitle\r\n        //     setTodolists([...todolists])\r\n        // }\r\n    }, []);\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"10px\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map((m) => {\r\n                        let taskForTodolist = tasks[m.id]\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist\r\n                                    todolist={m}\r\n                                    key={m.id}\r\n                                    removeTask={removeTask}\r\n                                    tasks={taskForTodolist}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTitle={changeTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\ntype TodolistListPropsType = {}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStoreType} from \"../app/store\";\r\nimport {setAppErrorAC} from \"../app/app-reducer/AppReducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackbars() {\r\n    //const [open, setOpen] = React.useState(false);\r\n    const error = useSelector<RootStoreType,string|null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\ndispatch(setAppErrorAC({error:null}))\r\n        //setOpen(false);\r\n    };\r\n\r\n    const isOpen = error !== null\r\n    return (\r\n\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}","import {combineReducers} from \"redux\";\r\nimport todolistReducer from \"../features/TodolistList/Todolist/todolist-reducer\";\r\nimport tasksReducer from \"../features/TodolistList/Todolist/tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionsTypes, appReducer, setAppErrorAC} from \"./app-reducer/AppReducer\";\r\nimport {authReducer, setIsLoggedIn} from \"../../features/login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n\r\n\r\nexport const RootReducer=combineReducers({\r\n    todolists:todolistReducer,\r\n    tasks:tasksReducer,\r\n    app:appReducer,\r\n    auth:authReducer\r\n})\r\n\r\nexport type RootReducerType=typeof RootReducer\r\n\r\nexport type RootStoreType=ReturnType<typeof RootReducer>\r\n\r\nexport type RootThunkTypes<ReturnType=void>=ThunkAction<ReturnType, RootStoreType, unknown, RootActionsTypes>\r\n\r\n\r\n// export const store=createStore(RootReducer,applyMiddleware(thunk));\r\n\r\nexport const store=configureStore({\r\n    reducer:RootReducer,\r\n    middleware:getDefaultMiddleware=>\r\n        getDefaultMiddleware().prepend(thunk)\r\n})\r\ntype RootDispatch=typeof store.dispatch\r\nexport const useRootDispatch=()=>useDispatch<RootDispatch>()\r\n\r\nexport type RootActionsTypes= ReturnType<typeof setIsLoggedIn>\r\n| ReturnType<typeof setAppErrorAC>\r\n| AppActionsTypes\r\n// | TasksActionsTypes\r\n// | TodolistActionsTypes\r\n\r\n// @ts-ignore\r\nwindow.store=store","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {RootStoreType, useRootDispatch} from \"../../components/app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {LoginRequestType} from \"../../api/todolist-task-api\";\r\nimport {Omit} from \"@material-ui/core\";\r\n\r\n// type FormikErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\ntype FormValuesType={\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n}\r\nexport const Login = () => {\r\n\r\n    // const dispatch:RootDispatch=useDispatch();\r\n    const dispatch=useRootDispatch()\r\n\r\n    const isLoggedIn=useSelector<RootStoreType,boolean>(state =>state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginRequestType,'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password){\r\n                errors.password = 'Password required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be password at least 7 characters';\r\n            }\r\n            return errors;\r\n        },\r\n            onSubmit: async (values:FormValuesType,formikHelpers:FormikHelpers<FormValuesType>) => {\r\n            const res=await dispatch(loginTC(values))\r\n                if(loginTC.rejected.match(res)){\r\n                    if(res.payload?.fieldsErrors?.length){\r\n                        const error=res.payload?.fieldsErrors[0]\r\n                      formikHelpers.setFieldError(error.field,error.error)\r\n                    }\r\n                }\r\n           // if(res === \"bad) show error\r\n        },\r\n    })\r\n    if(isLoggedIn){\r\n        return <Navigate to={\"/\"}/>\r\n}\r\n\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField label=\"Email\"\r\n                               type={\"email\"}\r\n                               margin=\"normal\"\r\n                        {...formik.getFieldProps(\"email\")}/>\r\n                    {formik.touched.email && formik.errors.email?<div style={{color:\"red\"}}>{formik.errors.email}</div>:null}\r\n                    <TextField type=\"password\"\r\n                               label=\"Password\"\r\n                               margin=\"normal\"\r\n                        {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password?<div style={{color:\"red\"}}>{formik.errors.password}</div>:null}\r\n                    <FormControlLabel label={'Remember me'}\r\n\r\n                                      control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}/>}/>\r\n                    <Button type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TaskType} from '../../api/todolist-task-api';\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {LinearProgress} from \"@mui/material\";\r\nimport ErrorSnackbars from \"../ErrorSnackBar/ErrorSnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStoreType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer/AppReducer\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../../features/login/Login\";\r\nimport {logoutTC} from \"../../features/login/auth-reducer\";\r\n\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<RootStoreType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<RootStoreType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<RootStoreType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbars/>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"menu\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        To-do list\r\n                    </Typography>\r\n                    {\r\n                        isLoggedIn && <Button color={\"inherit\"} onClick={logoutHandler}>Log out</Button>\r\n                    }\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<TodolistList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} element={<Login/>}/>\r\n                    <Route path={\"/404\"} element={<h1>404. Page not found</h1>}/>\r\n                    <Route path={\"*\"} element={<Navigate to={\"/404\"}/>}/>\r\n                </Routes>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\ntype PropsType = {\r\n    demo?: boolean\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./components/app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./components/app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}